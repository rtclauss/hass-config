################################################################
## Packages / Curling
################################################################

################################################
## Customize
################################################

homeassistant:
  customize:
    ################################################
    ## Node Anchors
    ################################################

    package.node_anchors:
      customize: &customize
        package: "curling"

      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

    ################################################
    ## Automation
    ################################################

    # automation.leave_home_for_curling:
    #   <<: *customize
    #   friendly_name: "Leave home for curling"
    #   icon: mdi:curling

    automation.return_home_from_OCC:
      <<: *customize
      friendly_name: "Return home from OCC"
      icon: mdi:curling

    automation.return_home_from_spcc:
      <<: *customize
      friendly_name: "Return home from SPCC"
      icon: mdi:curling

    automation.display_curling_tab:
      <<: *customize
      friendly_name: "Display Curling tab"
      icon: mdi:curling

    automation.toggle_curling_automations_on_season_change:
      <<: *customize
      friendly_name: "Toggle Curling season automations"
      icon: mdi:curling

    automation.toggle_curling_tab:
      <<: *customize
      friendly_name: "Toggle Curling tab"
      icon: mdi:curling

    ################################################
    ## Binary Sensor
    ################################################

    binary_sensor.curling_season:
      <<: *customize
      friendly_name: "Curling Season"
      icon: mdi:calendar

    ################################################
    ## Group
    ################################################

    group.curling_sensors:
      <<: *customize
      friendly_name: "Curling Sensors"

    group.curling_automations:
      <<: *customize
      friendly_name: "Curling Automations"

    ################################################
    ## Scripts
    ################################################
    script.toggle_curling_automation_on_curling_season:
      <<: *customize
      friendly_name: "Toggle Curling Automation Based on Boolean Sensor"

    ################################################
    ## Sensors
    ################################################

########################
# Automations
########################
automation:
  - id: leave_home_for_curling
    alias: leave_home_for_curling
    trigger:
      - platform: zone
        entity_id: device_tracker.bayesian_zeke_home
        zone: zone.home
        event: leave
    condition:
      condition: and
      conditions:
        - condition: time
          after: "15:30:00"
          before: "20:10:00"
          weekday:
            - tue
            - wed
            - thu
        - condition: state
          entity_id: input_boolean.guest_mode
          state: "off"
        - condition: state
          entity_id:
            - binary_sensor.curling_season
          state: "on"
    action:
      # Revert back when batteries are all reset/new
      # including main level vacuum
      # - alias: Start Vacuums
      #   service: vacuum.start
      #   target:
      #     entity_id: all
      - action: mqtt.publish
        data:
          topic: valetudo/upstairs-vacuum/MapSegmentationCapability/clean/set
          payload: >-
            {% set segment_id = now().weekday() + 1 %}
            {"segment_ids": ["{{segment_id}}"],"iterations": 4,"customOrder": true}
      - action: climate.set_preset_mode
        enabled: false
        entity_id: climate.my_ecobee
        data:
          preset_mode: "away_indefinitely"
      - data:
          message: Good Curling!
        action: notify.all

  - id: return_home_from_occ
    alias: return_home_from_occ
    trigger:
      - platform: zone
        entity_id: device_tracker.bayesian_zeke_home
        zone: zone.occ
        event: leave
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - thu
            - sun
        - condition: state
          entity_id:
            - binary_sensor.curling_season
          state: "on"
    action:
      # - service: climate.set_preset_mode
      #   entity_id: climate.my_ecobee
      #   data:
      #     preset_mode: "Home"
      - service: ecobee.resume_program
        data:
          resume_all: true
          entity_id: climate.my_ecobee
      - service: notify.all
        data_template:
          message: >-
            Turning off Ecobee Away mode while driving home from OCC

  - id: return_home_from_spcc
    alias: return_home_from_spcc
    trigger:
      - platform: zone
        entity_id: device_tracker.bayesian_zeke_home
        zone: zone.spcc
        event: leave
    condition:
      condition: state
      entity_id:
        - binary_sensor.curling_season
      state: "on"
    action:
      # - service: climate.set_preset_mode
      #   entity_id: climate.my_ecobee
      #   data:
      #     preset_mode: "Home"
      - service: ecobee.resume_program
        data:
          resume_all: true
          entity_id: climate.my_ecobee
      - service: notify.all
        data_template:
          message: >-
            Turning off Ecobee away mode while driving home from SPCC

  - id: toggle_curling_automations_on_season_change
    alias: toggle_curling_automations_on_season_change
    trigger:
      - platform: state
        entity_id: binary_sensor.curling_season
      - platform: homeassistant
        event: start
    action:
      - service: script.toggle_curling_automation_on_curling_season
        data:
          entity_id: automation.return_home_from_OCC
      # - service: script.toggle_curling_automation_on_curling_season
      #   data:
      #     entity_id: automation.leave_home_for_curling
      - service: script.toggle_curling_automation_on_curling_season
        data:
          entity_id: automation.return_home_from_spcc

  # - id: toggle_curling_tab
  #   alias: toggle_curling_tab
  #   trigger:
  #   - platform: state
  #     entity_id: binary_sensor.curling_season
  #   - platform: homeassistant
  #     event: start
  #   condition: []
  #   action:
  #   - delay: '00:00:{{ (range(1,60)|random|int) }}'
  #   - service: script.toggle_view
  #     data_template:
  #       view_id: curling
  #       visible: >-
  #         {{ is_state("binary_sensor.curling_season", 'on') | lower }}

########################
# Binary Sensors
########################
binary_sensor:
  - platform: template
    sensors:
      curling_season:
        value_template: >-
          {{ now().strftime("%m") |int in [1,2,3,10,11,12] }}

########################
# Groups
########################
group:
  curling_sensors:
    entities:
      - binary_sensor.curling_season
      - sensor.occ_time
      - sensor.owatonna_curling_club_bayesian_zeke_home_distance
      - sensor.owatonna_curling_club_nearest_direction_of_travel
      - sensor.spcc_time
      - sensor.st_paul_curling_club_bayesian_zeke_home_distance
      - sensor.st_paul_curling_club_nearest_direction_of_travel
  curling_automations:
    entities:
      - automation.leave_home_for_curling
      - automation.return_home_from_occ
      - automation.return_home_from_spcc

########################
# Scripts
########################
script:
  toggle_curling_automation_on_curling_season:
    sequence:
      - service: >-
          {% if is_state("binary_sensor.curling_season", 'on') %}
            automation.turn_on
          {% else %}
            automation.turn_off
          {% endif %}
        data_template:
          entity_id: "{{ entity_id }}"

########################
# Sensors
########################
sensor:

################################################
## Templates
################################################
template:
  - sensor:
      - name: OCC Time
        state: >-
          {% if states.sensor.owatonna_curling_club_nearest_direction_of_travel.last_changed is defined %}
             {{ (as_timestamp(now(), default=now()) - as_timestamp(states.sensor.owatonna_curling_club_nearest_direction_of_travel.last_changed, default=now())) | int //60 }}
          {% else %}
            {{now()}}
          {% endif %}
        unit_of_measurement: "minutes"
        device_class: duration
      - name: SPCC Time
        state: >-
          {% if states.sensor.st_paul_curling_club_nearest_direction_of_travel.last_changed is defined %}
             {{ (as_timestamp(now(), default=now()) - as_timestamp(states.sensor.st_paul_curling_club_nearest_direction_of_travel.last_changed, default=now())) | int //60 }}
          {% else %}
            {{now()}}
          {% endif %}
        unit_of_measurement: "minutes"
        device_class: duration
