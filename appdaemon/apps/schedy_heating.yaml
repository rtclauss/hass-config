# TODO replace when move finished
# schedy_heating: # This is our app instance name.
#   module: hass_apps_loader
#   class: SchedyApp

#   #debug: true

#   actor_type: thermostat

#   expression_environment: |
#     def hvac_mode():
#       return state("climate.glycol_thermostat")

#     def zeke_location():
#       return state("person.ryan")

#     def guest_mode_on():
#       return is_on("input_boolean.guest_mode")

#     def egress_open():
#       return is_on("group.egress_points")

#   schedule_snippets:
#     cooling_season:
#       - weekdays: 1-5
#         v: 75
#         rules:
#           - x: "85 if zeke_location() != 'home' and guest_mode_on() != True else Next()"
#           - { start: "20:30", end: "07:00", weekdays: 1-5, v: 74 }
#           - { start: "20:30", end: "08:30", weekdays: 6-7, v: 74 }
#           - x: "74 if zeke_location() == 'home' else Next()"
#       - weekdays: 6-7
#         v: 74
#         rules:
#           - { v: 74, start: "00:00", end: "06:00" }
#           - x: "74 if zeke_location() == 'home' else Next()"
#           - x: "85 if zeke_location() != 'home' else Next()"

#     heating_season:
#       - weekdays: 1-5
#         v: 68
#         rules:
#           - x: "55 if zeke_location() != 'home' and guest_mode_on() != True else Next()"
#           - x: |
#               current_time = datetime.datetime.strptime(state('sensor.time'), '%H:%M').time()
#               # check if work meeting alarm is on
#               wakeup_time = datetime.datetime.strptime(state('input_datetime.next_work_meeting'), '%H:%M:%S')
#               revert_schedule_time = datetime.datetime.strptime("10:00:00", '%H:%M:%S').time()
#               wakeup_prep = (wakeup_time - datetime.timedelta(hours=1, minutes=30)).time()

#               # Following line prints to AppDaemon Log (In the Hassio Add-on Page)
#               print("rtclauss: {} >= {} is {}".format(current_time, wakeup_prep, (current_time >= wakeup_prep)))
#               print("rtclauss location info: {}".format(zeke_location()))
#               print("rtclauss is home: {}".format(zeke_location() == 'home'))
#               if current_time >= wakeup_prep and current_time <= revert_schedule_time and is_off('input_boolean.trip') and zeke_location() == 'home' and is_on('binary_sensor.workday_sensor'):
#                 result = 68
#               else:
#                 result = Next()
#           - { start: "06:00", end: "08:00", v: 61 }
#           - { start: "08:00", end: "10:00", v: 64 }
#           - { start: "10:00", end: "17:00", v: 68 }
#           - { start: "17:00", end: "22:30", v: 68 }
#           - { start: "22:30-1d", end: "07:00+1d", v: 60 }
#           - x: "68 if zeke_location() == 'home' else Next()"

#       - weekdays: 6-7
#         v: 68
#         rules:
#           - { v: 60, start: "00:00", end: "09:00" }
#           - { v: 61, start: "09:00", end: "10:00" }
#           - { v: 62, start: "10:00", end: "11:00" }
#           - { v: 65, start: "11:00", end: "12:00" }
#           #- { v: 68, start: "12:00", end: "17:00" }
#           - x: "68 if zeke_location() == 'home' else Next()"
#           - x: "55 if zeke_location() != 'home' else Next()"

#   # schedule_append:
#   #   - v: 'OFF'

#   schedule_prepend:
#     - x: "Mark(OFF, Mark.OVERLAY) if is_on('group.egress_points') else Next()"

#   rooms:
#     whole_house:
#       actors:
#         climate.glycol_thermostat:
#           supports_hvac_modes: false
#           max_temp: 90
#           min_temp: 60
#       rescheduling_delay: 240
#       schedule:
#         - x: "IncludeSchedule(schedule_snippets['cooling_season']) if hvac_mode() == 'cool' else Next()"
#         - x: "IncludeSchedule(schedule_snippets['heating_season']) if hvac_mode() == 'heat' else Break()"
#     basement:
#       actors:
#         climate.basement:
#           max_temp: 90
#           min_temp: 60
#       rescheduling_delay: 240
#       schedule:
#         - v: "OFF"
#           rules:
#             - x: "Next() if guest_mode_on() else Break()"
#             - { v: 60, start: "00:00", end: "06:00" }
#             - { v: 70, start: "06:00" }
#         - v: "OFF"

#   statistics:
#     whole_house_temp_delta:
#       type: temp_delta
#     basement_temp_delta:
#       type: temp_delta

#   watched_entities:
#     - climate.glycol_thermostat
#     - climate.basement
#     - input_datetime.next_work_meeting
#     - input_boolean.trip
#     - person.ryan
#     - binary_sensor.workday_sensor
#     - group.egress_points
#     - sensor.time
#     - input_boolean.guest_mode
