schedy_heating:  # This is our app instance name.
  module: hass_apps_loader
  class: SchedyApp

  debug: true

  actor_type: thermostat

  expression_environment: | 
    def hvac_mode():
      return state("climate.glycol_thermostat")
    
    def ryan_location():
      return state("person.ryan")

  schedule_snippets:
    cooling_season:
      - v: 72
        rules:
          - {start: "20:30", end: "07:00", weekdays: 1-5}
          - {start: "20:30", end: "08:30", weekdays: 6-7}
      - v: 75
    heating_season:
      - weekdays: 1-5
        rules:
          - x: "60 if ryan_location() != 'home' else Next()"
            ## This expression isn't working
          #- x: "71 if (datetime.datetime.strptime(state('sensor.time'), '%H:%M') >= (datetime.datetime.strptime(state('input_datetime.next_work_meeting'), '%H:%M:%S') - datetime.timedelta(hours=1, minutes=0)).time() and is_off('input_boolean.trip') and is_on('binary_sensor.workday_sensor') and ryan_location() == 'home') and is_off('input_boolean.morning_routine') else Next()"
          - x: | 
              current_time = datetime.datetime.strptime(state('sensor.time'), '%H:%M').time()
              wakeup_time = datetime.datetime.strptime(state('input_datetime.next_work_meeting'), '%H:%M:%S')

              wakeup_prep = (wakeup_time - datetime.timedelta(hours=1, minutes=30)).time()
              if current_time >= wakeup_prep and is_off('input_boolean.trip') and ryan_location() == 'home'and is_on('binary_sensor.workday_sensor') and is_off('input_boolean.morning_routine'):
                result = 71
              else:
                result = Next()
          - {start: "07:00", end: "10:00", v: 65}
          - {start: "22:30-1d", end: "07:00+1d", v: 60}
          - x: "72 if ryan_location() == 'home' else Next()"

      - weekdays: 6-7
        rules:
          - {v: 60, start: "00:00", end: "06:00"}
          - {v: 62, start: "06:00", end: "07:00"}
          - {v: 64, start: "07:00", end: "08:00"}
          - {v: 66, start: "08:00", end: "09:00"}
          - {v: 68, start: "10:00", end: "17:00"}
          - x: "70 if ryan_location() == 'home' else Next()"
          - x: "60 if ryan_location() != 'home' else Next()"

  # schedule_append:
  #   - v: 'OFF'

  schedule_prepend:
    - x: "Mark(OFF, Mark.OVERLAY) if is_on('group.egress_points') else Next()"

  rooms:
    whole_house:
      actors:
        climate.glycol_thermostat:
          #supports_hvac_modes: false
          max_temp: 90
          min_temp: 45
      rescheduling_delay: 120
      schedule:
        - x: "IncludeSchedule(schedule_snippets['cooling_season']) if hvac_mode() == 'cool' else Next()"
        - x: "IncludeSchedule(schedule_snippets['heating_season']) if hvac_mode() == 'heat' else Next()"
  
  statistics:
    whole_house_temp_delta:
      type: temp_delta
  
  watched_entities:
    - climate.glycol_thermostat
    - input_datetime.next_work_meeting
    - input_boolean.trip
    - person.ryan
    - binary_sensor.workday_sensor
    - input_boolean.morning_routine
    - group.egress_points
    - sensor.time
